generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model DailyTip {
  id            Int       @id @default(autoincrement())
  title         String
  summary       String
  content       String
  image_url     String
  video_url     String
  references    Json
  lastShownDate DateTime?
  isActive      Boolean   @default(false)
}

model Exercise {
  id              Int         @id @default(autoincrement())
  name            String
  video_url       String
  image_url       String
  description     String
  goals           Goal[]
  users           User[]
  focuses         Focus[]
  muscles         Muscle[]
  tips            String[]
  steps           String[]
  alternate_names String[]
  difficulty      Difficulty
  equipments      Equipment[]

  RoutineDayExercise RoutineDayExercise[]
}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  email            String    @unique
  weight           Float?
  height           Float?
  name             String?
  goals            Goal[]
  gender           String?
  password         String
  birthday         DateTime?
  age              Int?
  phone            String?
  avatar           String?
  resetToken       String?   @unique
  resetTokenExpiry DateTime?

  fav_exercises Exercise[]
  routines      UserRoutine[]
}

model Routine {
  id          Int      @id @default(autoincrement())
  name        String
  goal        Goal[]
  muscle      Muscle[]
  notes       String?
  renewalDate DateTime

  days  RoutineDay[]
  users UserRoutine[]
}

model UserRoutine {
  id        Int      @id @default(autoincrement())
  isCreator Boolean  @default(false)
  joinedAt  DateTime @default(now())

  userId    Int
  routineId Int
  user      User    @relation(fields: [userId], references: [id])
  routine   Routine @relation(fields: [routineId], references: [id])
}

model RoutineDay {
  id      Int     @id @default(autoincrement())
  avgTime Int?
  note    String?
  day     WEEKDAY

  routineId Int
  exercises RoutineDayExercise[]
  routine   Routine              @relation(fields: [routineId], references: [id])

  @@unique([routineId, day]) // Ensures unique days within the same routine
}

model RoutineDayExercise {
  id   Int @id @default(autoincrement())
  sets Int
  reps Int
  rest Int

  exerciseId   Int
  routineDayId Int
  exercise     Exercise   @relation(fields: [exerciseId], references: [id])
  routineDay   RoutineDay @relation(fields: [routineDayId], references: [id])
}

enum WEEKDAY {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Difficulty {
  DARK_SOULS
  HARD
  MEDIUM
  EASY
}

enum Equipment {
  BODY_WEIGHT
  BARBELL
  DUMBBELL
  KETTLEBELL
  MEDICINE_BALL
  RESISTANCE_BAND
  SAND_BAG
  SLAM_BALL
  SLED
  WEIGHT_PLATE
  BOX
  BENCH
  PULL_UP_BAR
  RINGS
  PARALLETTES
  JUMP_ROPE
  ROWER
  BIKE
  TREADMILL
  SKIERG
  STAIR_MASTER
  ELLIPTICAL
  SWIMMING_POOL
  TRACK
  FIELD
  SLEDGE_HAMMER
  TIRES
}

enum Muscle {
  NECK

  REAR_DELTS
  FRONT_DELTS
  LATERAL_DELTS

  TRAPS

  UPPER_CHEST
  LOWER_CHEST
  MIDDLE_CHEST

  LATS
  UPPER_BACK
  LOWER_BACK

  BICEPS
  TRICEPS
  FOREARMS

  ABS
  V_Line
  OBLIQUES

  QUADS
  CALVES
  GLUTES
  ADDUCTORS
  ABDUCTORS
  HAMSTRINGS

  HIP_FLEXORS
}

enum Goal {
  FAT_BURNING
  WEIGHT_LOSS
  PERFORMANCE
  MUSCLE_GAIN
  STRENGTH
  FLEXIBILITY
  ENDURANCE
  BALANCE
  COORDINATION
  AGILITY
  SPEED
  POWER
  CARDIO
  MUSCLE_TONE
  MUSCLE_DEFINITION
  MUSCLE_HYPERTROPHY
  MUSCLE_MAINTENANCE
  MUSCLE_RECOVERY
  MUSCLE_REHABILITATION
  MUSCLE_ACTIVATION
  MUSCLE_RELAXATION
  MUSCLE_MOBILITY
  MUSCLE_STABILITY
  MUSCLE_EXPLOSIVENESS
}

enum Focus {
  UPPER_BODY
  LOWER_BODY
  FULL_BODY
  CORE
  ARMS
  LEGS
  BACK
  CHEST
  SHOULDERS
  GLUTES
  STRETCH
  MINDFULNESS
  WARM_UP
  COOL_DOWN
}
